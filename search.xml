<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SSM注解</title>
      <link href="/2020/06/19/ssm-zhu-jie/"/>
      <url>/2020/06/19/ssm-zhu-jie/</url>
      
        <content type="html"><![CDATA[<hr><p>categories: SSM<br>tags: SSM</p><hr><h3 id="SSM注解详细介绍"><a href="#SSM注解详细介绍" class="headerlink" title="SSM注解详细介绍"></a>SSM注解详细介绍</h3><h4 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h4><blockquote><p>通过@Controller注解说明该类非普通类，而是一个控制器类,这一个注解一般使用在SpringMvc层</p></blockquote><h4 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h4><blockquote><p>是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。用于方法上表示请求的方法是该地址的子路径。 </p></blockquote><p>  @RequestMapping注解有六个属性，分成三类进行说明:</p><ol><li><code>value</code> ，<code>method</code>；</li></ol><ul><li><p>value：     指定请求的实际地址，指定的地址可以是URI Template 模式；</p></li><li><p>method：  指定请求的method类型， GET、POST、PUT、DELETE等；</p></li></ul><ol start="2"><li><code>consumes</code>，<code>produces</code></li></ol><ul><li><p>consumes： 指定处理请求的提交内容类型（Content-Type），例如application/json, text/html;</p></li><li><p>produces:    指定返回的内容类型，仅当request请求头中的)类型中包含该指定类型才返回；</p></li></ul><ol start="3"><li><code>params</code>，<code>headers</code></li></ol><ul><li><p>params： 指定request中必须包含某些参数值是，才让该方法处理。</p></li><li><p>params 只是判断url 或者 form data 中的参数是否复合params的定义，并不会直接绑定数据到方法的参数中！</p></li><li><p>headers： 指定request中必须包含某些指定的header值，才能让该方法处理请求。</p></li></ul><pre><code class="java">@Controller@RequestMapping(&quot;/dept&quot;)public class DeptHandler {    @Autowired    IDeptService deptService;    @RequestMapping(&quot;/findDept.do&quot;)    public String findDept(@RequestParam(defaultValue = &quot;1&quot;) int pageIndex, String name, Model model){        PageModel pageModel = new PageModel();        pageModel.setPageIndex(pageIndex);        List&lt;Dept&gt; depts = deptService.findDept(name,pageModel);        //查询部门记录数        int recordCount = deptService.findDeptCount(name);        pageModel.setRocordCount(recordCount);        model.addAttribute(&quot;pageModel&quot;,pageModel);        model.addAttribute(&quot;depts&quot;,depts);        model.addAttribute(&quot;name&quot;,name);        for (Dept d:depts){            System.out.println(d);        }        return &quot;/jsp/dept/dept.jsp&quot;;    }</code></pre><h4 id="Resource和-Autowired"><a href="#Resource和-Autowired" class="headerlink" title="@Resource和@Autowired"></a>@Resource和@Autowired</h4><blockquote><p>@Autowired顾名思义，就是自动装配。其作用是为了消除代码Java代码里面的getter/setter与bean属性中的property。当然，getter看个人需求，如果私有属性需要对外提供的话，应当予以保留。@Autowired默认按类型匹配的方式，在容器查找匹配的Bean，当有且仅有一个匹配的Bean时，Spring将其注入@Autowired标注的变量中。<br>@Autowired默认按照byType方式进行bean匹配，@Resource默认按照byName方式进行bean匹配@Autowired是Spring的注解，@Resource是J2EE的注解。在SSM框架的Service层使用@Autowired注解自动导入Dao包容易爆红，虽然代码可以运行但是使用@Resourse就不会出现报错的现象</p></blockquote><h4 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h4><blockquote><p>@Service用于标注业务层组件</p></blockquote><pre><code class="java">@Servicepublic class DeptServiceImpl implements IDeptService {    @Resource  //自动注入 但不会报错     IDeptDao deptDao;</code></pre><h4 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h4><blockquote><p>作用： 该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。<br>使用时机：返回的数据不是html标签的页面，而是其他某种格式的数据时（如json、xml等）使用；</p></blockquote><pre><code class="java"> @RequestMapping(&quot;/addDept.do&quot;)    @ResponseBody    public Object addDept(Dept dept){        int rows = deptService.addDept(dept);        if(rows &gt; 0){            int recordCount = deptService.findDeptCount(null);            PageModel pageModel = new PageModel();            pageModel.setRocordCount(recordCount);            int totalSize = pageModel.getTotalSize();            System.out.println(totalSize);            return totalSize;        }else{            return &quot;FAIL&quot;;        }    }</code></pre><h4 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h4><blockquote><p>这个注解是@RequestBody和@Controller的合体，作用也是两个注解的合并。<br>1)如果只是使用@RestController注解Controller，则Controller中的方法无法返回jsp页面，配置的视图解析器InternalResourceViewResolver不起作用，返回的内容就是Return 里的内容。<br>例如：本来应该到success.jsp页面的，则其显示success.<br>2) 如果需要返回到指定页面，则需要用 @Controller配合视图解析器InternalResourceViewResolver才行。<br>3)如果需要返回JSON，XML或自定义mediaType内容到页面，则需要在对应的方法上加上@ResponseBody注解。</p></blockquote><h4 id="Param"><a href="#Param" class="headerlink" title="@Param"></a>@Param</h4><blockquote><p>不使用@Param注解时，参数只能有一个，并且是Javabean。在SQL语句里可以引用JavaBean的属性，而且只能引用JavaBean的属性<br>一般在Dao接口传递两个或三个较少的参数时可以使用@Param注解，如果涉及的参数较多，可以把所有参数进行Map封装，然后传递Map就可以了</p></blockquote><h4 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h4><blockquote><p>在springMVC中使用RequestParam注解映射请求参数，@RequestParam有三个属性，分别如下：<br>(1) <code>value</code> 请求参数的参数名,作为参数映射名称；<br>(2) <code>required</code> ，默认为true(必填)，当设置成必填时，如果没有传入参数，报错；<br>(3) <code>defaultValue</code> 设置请求参数的默认值；</p></blockquote><blockquote><p>@requestParam主要用于在SpringMVC后台控制层获取参数，类似一种是request.getParameter(“name”)，它有三个常用参数：defaultValue = “0”, required = false, value = “isApp”；defaultValue 表示设置默认值，required 铜过boolean设置是否是必须要传入的参数，value 值表示接受的传入的参数类型。</p></blockquote><blockquote><p><code>value</code>：参数key，可以不写；<br><code>required</code>：默认值为true，可以不写；</p></blockquote><h4 id="Spring其它常用注解汇总"><a href="#Spring其它常用注解汇总" class="headerlink" title="Spring其它常用注解汇总"></a>Spring其它常用注解汇总</h4><blockquote><p>使用注解之前要开启自动扫描功能，其中base-package为需要扫描的包(含子包)。</p></blockquote><p><code>@Configuration</code>把一个类作为一个IoC容器，它的某个方法头上如果注册了@Bean，就会作为这个Spring容器中的Bean。<br><code>@Scope</code>注解 作用域<br><code>@Lazy(true)</code> 表示延迟初始化<br><code>@Service</code>用于标注业务层组件、<br><code>@Controller</code>用于标注控制层组件（如struts中的action）<br><code>@Repository</code>用于标注数据访问组件，即DAO组件。<br><code>@Component</code>泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。<br><code>@Scope</code>用于指定scope作用域的（用在类上）<br><code>@PostConstruct</code>用于指定初始化方法（用在方法上）<br><code>@PreDestory</code>用于指定销毁方法（用在方法上）<br><code>@DependsOn</code>：定义Bean初始化及销毁时的顺序<br><code>@Primary</code>：自动装配时当出现多个Bean候选者时，被注解为@Primary的Bean将作为首选者，否则将抛出异常<br><code>@Autowired</code> 默认按类型装配，如果我们想使用按名称装配，可以结合@Qualifier注解一起使用。如下：<code>@Autowired @Qualifier</code>(“personDaoBean”) 存在多个实例配合使用<br><code>@Resource</code>默认按名称装配，当找不到与名称匹配的bean才会按类型装配。<br><code>@PostConstruct</code> 初始化注解<br><code>@PreDestroy</code> 摧毁注解 默认 单例  启动就加载<br><code>@Async</code>异步方法调用</p>]]></content>
      
      
      <categories>
          
          <category> 注解 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM入门</title>
      <link href="/2020/06/17/ssm/"/>
      <url>/2020/06/17/ssm/</url>
      
        <content type="html"><![CDATA[<h3 id="搭建简单的SSM项目"><a href="#搭建简单的SSM项目" class="headerlink" title="搭建简单的SSM项目"></a>搭建简单的SSM项目</h3><h4 id="什么是SSM"><a href="#什么是SSM" class="headerlink" title="什么是SSM"></a>什么是SSM</h4><blockquote><p>SSM（Spring+SpringMVC+MyBatis）框架集由Spring、MyBatis两个开源框架整合而成（SpringMVC是Spring中的部分内容）。常作为数据源较简单的web项目的框架。</p></blockquote><h4 id="SSM的基本构成是什么？"><a href="#SSM的基本构成是什么？" class="headerlink" title="SSM的基本构成是什么？"></a>SSM的基本构成是什么？</h4><p>　　1. Spring就像是整个项目中装配bean的大工厂，在配置文件中可以指定使用特定的参数去调用实体类的构造方法来实例化对象。也可以称之为项目中的粘合剂。 Spring的核心思想是IoC（控制反转），即不再需要程序员去显式地new一个对象，而是让Spring框架帮你来完成这一切。<br>　　<br>　　2. SpringMVC在项目中拦截用户请求，它的核心Servlet即DispatcherServlet承担中介或是前台这样的职责，将用户请求通过HandlerMapping去匹配Controller，Controller就是具体对应请求所执行的操作。SpringMVC相当于SSH框架中struts。</p><p>　　3. mybatis是对jdbc的封装，它让数据库底层操作变的透明。mybatis的操作都是围绕一个sqlSessionFactory实例展开的。mybatis通过配置文件关联到各实体类的Mapper文件，Mapper文件中配置了每个类对数据库所需进行的sql语句映射。在每次与数据库交互时，通过sqlSessionFactory拿到一个sqlSession，再执行sql命令。</p><h4 id="SSM框架的好处有哪些呢"><a href="#SSM框架的好处有哪些呢" class="headerlink" title="SSM框架的好处有哪些呢"></a>SSM框架的好处有哪些呢</h4><ol><li><code>减少编码</code><br>好的开发框架编写了大量的基础功能，程序员将工作重心放到业务逻辑上的实现。</li></ol><p>比如spring 简化了java程序对数据库的访问，提高了数据库的访问效率和稳定性，程序员只需要写好sql就行了。</p><ol start="2"><li><code>规范性，重用性</code></li></ol><p>开发框架使用了很多设计模式，比如mvc，在编写代码的时候程序员可以遵循mvc的模式，编写Controller，entity，view 对应的代码。</p><ol start="3"><li><code>易扩展，易维护</code></li></ol><p>mybatis 实现了对数据库的封装，当程序从oracle转向mysql时，不需要改动太多的地方，就能很方便的完成转变。</p><p>规范化编码，对维护性来说，方便了后续人员对代码的理解和修改。</p><p>SSM当然具备以上三种优势，尤其是从spring mvc 转变spring boot之后，约定大于配置，进一步简化了繁琐的配置工作，编写代码如丝滑般顺滑。</p><hr><p><strong>下面废话不多说说，我将开始第一个ssm项目的搭建工作</strong></p><ol><li>第一部需要搭建ssm框架说需要的配置资源文件，这些都是可以一步用一万步的，也正因为这些资源文件的繁琐多且容易出错，导致现在SSM逐渐没落，SpringBoot这样的框架逐渐成为主流</li></ol><p> <strong>mybatis.xml</strong></p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE configuration        PUBLIC &quot;-//mybatis.org//DTDConfig3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;&lt;configuration&gt;&lt;!--注册别名--&gt;&lt;typeAliases&gt;&lt;package name=&quot;com.bookstore.commons.beans&quot;/&gt;&lt;/typeAliases&gt;&lt;!--注册映射文件--&gt;&lt;mappers &gt;    &lt;package name=&quot;com.bookstore.**.dao&quot;/&gt;&lt;/mappers&gt;&lt;/configuration&gt;</code></pre><p><strong>Spring-datasource</strong></p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;&lt;!--加载属性文件--&gt;    &lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;/&gt;&lt;!--注册数据源，druid--&gt;    &lt;bean id=&quot;myDataSource&quot; class=&quot; com.alibaba.druid.pool.DruidDataSource&quot;&gt;        &lt;property name=&quot;driverClassName&quot; value=&quot;${jdbc.driver}&quot;/&gt;        &lt;property name=&quot;url&quot; value=&quot;${jdbc.url}&quot;/&gt;        &lt;property name=&quot;username&quot; value=&quot;${jdbc.username}&quot;/&gt;        &lt;property name=&quot;password&quot; value=&quot;${jdbc.password}&quot;/&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><p><strong>SpringMvc</strong></p><pre><code class="xml">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;&gt;&lt;!-- 注册组件扫描器，扫描所有handler包下的注册@controller   --&gt;    &lt;context:component-scan base-package=&quot;com.bookstore.**.handler&quot;/&gt;    &lt;!-- 注解驱动--&gt;    &lt;mvc:annotation-driven/&gt;    &lt;!--处理静态文件 --&gt;    &lt;mvc:default-servlet-handler/&gt;   &lt;!-- Multipart解析器--&gt;    &lt;bean id=&quot;multipartResolver&quot; class=&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;    &lt;/bean&gt;    &lt;mvc:interceptors&gt;            &lt;mvc:interceptor&gt;                &lt;mvc:mapping path=&quot;/admin/**&quot;/&gt;                &lt;mvc:exclude-mapping path=&quot;/admin/images/**&quot;/&gt;                &lt;mvc:exclude-mapping path=&quot;/admin/css/**&quot;/&gt;                &lt;mvc:exclude-mapping path=&quot;/admin/js/**&quot;/&gt;                &lt;mvc:exclude-mapping path=&quot;/admin/jquery/**&quot;/&gt;                &lt;bean class=&quot;com.bookstore.admin.Interceptor.LoginInterceptor&quot;/&gt;            &lt;/mvc:interceptor&gt;    &lt;/mvc:interceptors&gt;        &lt;!--异常解析器--&gt;   &lt;!-- &lt;bean class=&quot;org.springframework.web.servlet.handler.SimpleMappingExceptionResolver&quot;&gt;        &lt;property name=&quot;defaultErrorView&quot; value=&quot;/jsp/error.jsp&quot;/&gt;     &amp;lt;!&amp;ndash;   获取异常的类型&amp;ndash;&amp;gt;        &lt;property name=&quot;exceptionAttribute&quot; value=&quot;ex&quot;/&gt;     &amp;lt;!&amp;ndash;   根据异常的类型不同。到达不同的页面&amp;ndash;&amp;gt;      &amp;lt;!&amp;ndash;  &lt;property name=&quot;excludedExceptions&quot;&gt;            &lt;props&gt;                &lt;prop key=&quot;AAAA&quot;&gt;/jsp/aaa.jsp&lt;/prop&gt;                &lt;prop key=&quot;BBBB&quot;&gt;/jsp/bbbb.jsp&lt;/prop&gt;            &lt;/props&gt;        &lt;/property&gt;&amp;ndash;&amp;gt;      &lt;/bean&gt;--&gt;&lt;/beans&gt;</code></pre><p><strong>Spring-Mybatis</strong>整合配置</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd&quot;&gt;&lt;!--注册sqlsessionfactory--&gt;&lt;bean id=&quot;mySqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;myDataSource&quot;/&gt;    &lt;property name=&quot;configLocation&quot; value=&quot;classpath:mybatis.xml&quot;/&gt;&lt;/bean&gt;&lt;!--生成dao代理对象--&gt;    &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;        &lt;property name=&quot;basePackage&quot; value=&quot;com.bookstore.**.dao&quot;/&gt;        &lt;property name=&quot;sqlSessionFactoryBeanName&quot; value=&quot;mySqlSessionFactory&quot;/&gt;    &lt;/bean&gt;&lt;/beans&gt;</code></pre><p><em>Spring-service*</em>整合</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xmlns:context=&quot;http://www.springframework.org/schema/context&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;&lt;!--注册组件扫描器，扫描所以service包下的@service--&gt;    &lt;context:component-scan base-package=&quot;com.bookstore.**.service&quot;/&gt;&lt;/beans&gt;</code></pre><p><strong>Spring-tx</strong>事务</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;       xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd&quot;&gt;&lt;!--    注册平台事务管理器--&gt;    &lt;bean id=&quot;txManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;        &lt;property name=&quot;dataSource&quot; ref=&quot;myDataSource&quot;/&gt;    &lt;/bean&gt;&lt;!--    注册事务通知--&gt;    &lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;txManager&quot;&gt;&lt;!--        注册指定连接点--&gt;        &lt;tx:attributes&gt;            &lt;tx:method name=&quot;CreateOrder&quot; propagation=&quot;REQUIRED&quot; isolation=&quot;DEFAULT&quot; rollback-for=&quot;Exception&quot;/&gt;            &lt;tx:method name=&quot;add*&quot; propagation=&quot;REQUIRED&quot; isolation=&quot;DEFAULT&quot;/&gt;            &lt;tx:method name=&quot;remove*&quot; propagation=&quot;REQUIRED&quot; isolation=&quot;DEFAULT&quot; rollback-for=&quot;Exception&quot;/&gt;            &lt;tx:method name=&quot;modify*&quot; propagation=&quot;REQUIRED&quot; isolation=&quot;DEFAULT&quot;/&gt;            &lt;tx:method name=&quot;find*&quot; propagation=&quot;REQUIRED&quot; isolation=&quot;DEFAULT&quot; read-only=&quot;true&quot;/&gt;        &lt;/tx:attributes&gt;    &lt;/tx:advice&gt;&lt;!--    AOP配置--&gt;    &lt;aop:config&gt;        &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut=&quot;execution(* *..service.*.*(..))&quot;/&gt;    &lt;/aop:config&gt;&lt;/beans&gt;</code></pre><p><strong>jdbc</strong>数据库连接</p><pre><code class="xml">jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql:///bookstorejdbc.username=rootjdbc.password=123456</code></pre><ol start="2"><li>是对ssm配置的pom.xml,里面配置了各种功能说需要的依赖<pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</code></pre></li></ol><p><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"><br>  <modelVersion>4.0.0</modelVersion></p><p>  <groupId>com.aynu</groupId><br>  <artifactId>bookstore</artifactId><br>  <version>1.0-SNAPSHOT</version><br>  <packaging>war</packaging></p><p>  <name>bookstore Maven Webapp</name><br>  <!-- FIXME change it to the project's website --><br>  <url><a href="http://www.example.com" target="_blank" rel="noopener">http://www.example.com</a></url></p>  <properties>    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>    <maven.compiler.source>1.7</maven.compiler.source>    <maven.compiler.target>1.7</maven.compiler.target>  </properties>  <dependencies>    <dependency>      <groupId>junit</groupId>      <artifactId>junit</artifactId>      <version>4.11</version>      <scope>test</scope>    </dependency><pre><code>&lt;!--  https://mvnrepository.com/artifact/log4j/log4j  --&gt;&lt;dependency&gt;  &lt;groupId&gt;log4j&lt;/groupId&gt;  &lt;artifactId&gt;log4j&lt;/artifactId&gt;  &lt;version&gt;1.2.17&lt;/version&gt;&lt;/dependency&gt;&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12--&gt;&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;&lt;dependency&gt;  &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;  &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;  &lt;version&gt;1.3.3&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.slf4j&lt;/groupId&gt;  &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;  &lt;version&gt;1.7.25&lt;/version&gt;  &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;&lt;!-- https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-catalina--&gt;&lt;dependency&gt;  &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt;  &lt;artifactId&gt;tomcat-catalina&lt;/artifactId&gt;  &lt;version&gt;9.0.30&lt;/version&gt;&lt;/dependency&gt;&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-core--&gt;&lt;dependency&gt;  &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;  &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;  &lt;version&gt;2.9.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;  &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;  &lt;version&gt;2.9.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;  &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;  &lt;version&gt;2.9.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-core&lt;/artifactId&gt;  &lt;version&gt;5.2.2.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;  &lt;version&gt;5.2.2.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-context&lt;/artifactId&gt;  &lt;version&gt;5.2.2.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-expression&lt;/artifactId&gt;  &lt;version&gt;5.2.2.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-jcl&lt;/artifactId&gt;  &lt;version&gt;5.2.2.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;  &lt;version&gt;5.2.2.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;  &lt;version&gt;5.2.2.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;  &lt;version&gt;5.2.2.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;  &lt;version&gt;5.2.2.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-web&lt;/artifactId&gt;  &lt;version&gt;5.2.2.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;  &lt;version&gt;5.2.2.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.mybatis&lt;/groupId&gt;  &lt;artifactId&gt;mybatis&lt;/artifactId&gt;  &lt;version&gt;3.5.2&lt;/version&gt;&lt;/dependency&gt;&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring--&gt;&lt;dependency&gt;  &lt;groupId&gt;org.mybatis&lt;/groupId&gt;  &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;  &lt;version&gt;1.3.2&lt;/version&gt;&lt;/dependency&gt;&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java--&gt;&lt;dependency&gt;  &lt;groupId&gt;mysql&lt;/groupId&gt;  &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;  &lt;version&gt;5.1.47&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;aopalliance&lt;/groupId&gt;  &lt;artifactId&gt;aopalliance&lt;/artifactId&gt;  &lt;version&gt;1.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.aspectj&lt;/groupId&gt;  &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;  &lt;version&gt;1.9.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;  &lt;artifactId&gt;druid&lt;/artifactId&gt;  &lt;version&gt;1.1.12&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;javax.servlet&lt;/groupId&gt;  &lt;artifactId&gt;jstl&lt;/artifactId&gt;  &lt;version&gt;1.1.1&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;taglibs&lt;/groupId&gt;  &lt;artifactId&gt;standard&lt;/artifactId&gt;  &lt;version&gt;1.1.1&lt;/version&gt;&lt;/dependency&gt;&lt;!-- https://mvnrepository.com/artifact/javax.mail/mail --&gt;&lt;dependency&gt;  &lt;groupId&gt;javax.mail&lt;/groupId&gt;  &lt;artifactId&gt;mail&lt;/artifactId&gt;  &lt;version&gt;1.4.6&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;com.alipay.sdk&lt;/groupId&gt;  &lt;artifactId&gt;alipay-sdk-java&lt;/artifactId&gt;  &lt;version&gt;4.9.124.ALL&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.apache.poi&lt;/groupId&gt;  &lt;artifactId&gt;poi&lt;/artifactId&gt;  &lt;version&gt;4.1.2&lt;/version&gt;&lt;/dependency&gt;</code></pre>  </dependencies>  <build>    <finalName>bookstore</finalName>    <pluginManagement><!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) -->      <plugins>        <plugin>          <artifactId>maven-clean-plugin</artifactId>          <version>3.1.0</version>        </plugin>        <!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging -->        <plugin>          <artifactId>maven-resources-plugin</artifactId>          <version>3.0.2</version>        </plugin>        <plugin>          <artifactId>maven-compiler-plugin</artifactId>          <version>3.8.0</version>        </plugin>        <plugin>          <artifactId>maven-surefire-plugin</artifactId>          <version>2.22.1</version>        </plugin>        <plugin>          <artifactId>maven-war-plugin</artifactId>          <version>3.2.2</version>        </plugin>        <plugin>          <artifactId>maven-install-plugin</artifactId>          <version>2.5.2</version>        </plugin>        <plugin>          <artifactId>maven-deploy-plugin</artifactId>          <version>2.8.2</version>        </plugin>      </plugins>    </pluginManagement>    <resources>      <resource>        <directory>src/main/java</directory>        <includes>          <include>**/*.xml</include>          <include>**/*.properties</include>        </includes>      </resource>      <resource>        <directory>src/main/resources</directory>        <includes>          <include>**/*.xml</include>          <include>**/*.properties</include>        </includes>      </resource>    </resources>  </build></project>```3. 下面需要编写框架需要的bean实体类，在这里我就用了我上一个书城项目的原型来说明<p>   下面实体类里包含user表里的各种元素，然后利用idea自动生成下路SET,GET方法和输出</p><pre><code class="java">package com.bookstore.commons.beans;/** * @author 杨宇翔 * @version 1.0 * @date 2020/4/07 11:10 */import java.util.Date;public class User {    private Integer id;    private String username;    private String password;    private String gender;    private String email;    private String telephone;    private String introduce;    private String activeCode;    private int state;    private String role;    private Date registTime;    public Integer getId() {        return id;    }    public void setId(Integer id) {        this.id = id;    }    public String getUsername() {        return username;    }    public void setUsername(String username) {        this.username = username;    }    public String getPassword() {        return password;    }    public void setPassword(String password) {        this.password = password;    }    public String getGender() {        return gender;    }    public void setGender(String gender) {        this.gender = gender;    }    public String getEmail() {        return email;    }    public void setEmail(String email) {        this.email = email;    }    public String getTelephone() {        return telephone;    }    public void setTelephone(String telephone) {        this.telephone = telephone;    }    public String getIntroduce() {        return introduce;    }    public void setIntroduce(String introduce) {        this.introduce = introduce;    }    public String getActiveCode() {        return activeCode;    }    public void setActiveCode(String activeCode) {        this.activeCode = activeCode;    }    public int getState() {        return state;    }    public void setState(int state) {        this.state = state;    }    public String getRole() {        return role;    }    public void setRole(String role) {        this.role = role;    }    public Date getRegistTime() {        return registTime;    }    public void setRegistTime(Date registTime) {        this.registTime = registTime;    }    @Override    public String toString() {        return &quot;User{&quot; +                &quot;id=&quot; + id +                &quot;, username=&#39;&quot; + username + &#39;\&#39;&#39; +                &quot;, password=&#39;&quot; + password + &#39;\&#39;&#39; +                &quot;, gender=&#39;&quot; + gender + &#39;\&#39;&#39; +                &quot;, email=&#39;&quot; + email + &#39;\&#39;&#39; +                &quot;, telephone=&#39;&quot; + telephone + &#39;\&#39;&#39; +                &quot;, introduce=&#39;&quot; + introduce + &#39;\&#39;&#39; +                &quot;, activeCode=&#39;&quot; + activeCode + &#39;\&#39;&#39; +                &quot;, state=&quot; + state +                &quot;, role=&#39;&quot; + role + &#39;\&#39;&#39; +                &quot;, registTime=&quot; + registTime +                &#39;}&#39;;    }}</code></pre><ol start="4"><li><p>这一次我们开始入手三层框架的处理器层，也就是SpringMvc层，这一层里定义了框架所需要的各种方法，通过执行方法成功最终返回前台的JSP页面，顾名思义MVC就是Model，View和Controller的缩写，这一层就是视图框架和控制的整合</p><pre><code class="java"> //用户激活 @RequestMapping(&quot;/activeUser&quot;) public String activeUser(String activeCode) {     System.out.println(&quot;激活码为：&quot; + activeCode);     int rows = userService.activeUser(activeCode);     if (rows &gt; 0) {         //如果有参数需要再请求域内共享 就不需要加redirect         return &quot;redirect:/client/activesuccess.jsp&quot;;     } else {         return &quot;redirect:/client/activeFail.jsp&quot;;     } } //检查邮箱是否被占用 @RequestMapping(&quot;/findEmail&quot;) @ResponseBody public String findEmail(String email) {     // System.out.println(&quot;注册的邮箱&quot;+email);     User user = userService.findEmail(email);     if (user != null) {         return &quot;EXIST&quot;;     } else {         return &quot;OK&quot;;     } } //检查会员名是否被占用 @RequestMapping(&quot;/findUsername&quot;) @ResponseBody public String findUsername(String username) {     User user = userService.findUsername(username);     if (user != null) {         return &quot;EXIST&quot;;     } else {         return &quot;OK&quot;;     } } //我的账户 @RequestMapping(&quot;/myAccount&quot;) public String myAccount(HttpSession session,HttpServletRequest  request) {     //获取session中的登陆用户信息     User login_user = (User) session.getAttribute(&quot;login_user&quot;);     if (login_user == null) {//用户未登录         //自动登陆能否成功 调用自动登陆方法         login_user = autologin(request);         if (login_user != null){             //如果自动登陆成功，返回的login_user就不为空             //自动登陆成功，把登录用户信息放到session             session.setAttribute(&quot;login_user&quot;,login_user);             return &quot;/client/myAccount.jsp&quot;;         }         return &quot;/client/login.jsp&quot;; //点击我的账户到登陆页面     } else { //用户已登陆         return &quot;/client/myAccount.jsp&quot;; //显示我的账户信息     } } //用户登陆和验证激活 @RequestMapping(&quot;/login&quot;) public String login(User user, String remember,String autologin, HttpServletRequest request, HttpSession session, HttpServletResponse response) {     //查询用户名和密码是否存在     User login_user = userService.findUserByLogin(user);     if (login_user != null) {//如果用户名和密码正确         if (login_user.getState() == 1){//如果用户已激活，则登陆成功             if (&quot;1&quot;.equals(autologin)){                 //保存用户名和密码到cookie                 addCookie(autologin,user,request,response);             }else if (&quot;1&quot;.equals(remember)){                 //记住用户名，把用户名保存在cookie                 addCookie(autologin,user,request,response);             }         session.setAttribute(&quot;login_user&quot;, login_user);         return &quot;/client/myAccount.jsp&quot;;     } else {//用户未激活             request.setAttribute(&quot;login_error&quot;, &quot;用户名未激活，请激活后使用&quot;);             return &quot;/client/login.jsp&quot;;         }     } else{         request.setAttribute(&quot;login_error&quot;, &quot;用户名或密码错误，请重新登陆&quot;);         return &quot;/client/login.jsp&quot;;     } } //用户退出 @RequestMapping(&quot;/logout&quot;) public String logout(HttpSession session, Model model,HttpServletRequest request,HttpServletResponse response){    //从session中移除登录用户     session.removeAttribute(&quot;login_user&quot;);     //删除用户名     Cookie cookie1 = new Cookie(&quot;bookstore_username&quot;,null);     cookie1.setMaxAge(0);     cookie1.setPath(request.getContextPath()+&quot;/&quot;);     response.addCookie(cookie1);     model.addAttribute(&quot;login_error&quot;,&quot;用户退出成功，请重新登陆&quot;);     //删除密码     Cookie cookie2 = new Cookie(&quot;bookstore_password&quot;,null);     cookie2.setMaxAge(0);     cookie2.setPath(request.getContextPath()+&quot;/&quot;);     response.addCookie(cookie2);     model.addAttribute(&quot;login_error&quot;,&quot;用户退出成功，请重新登陆&quot;);     return &quot;/client/login.jsp&quot;; }</code></pre><ol start="5"><li>第二层是Spring层也就是service层，这一层把上一层controller定义的方法通过接口传递过来<br>```<br>package com.bookstore.client.user.service;<br>/**</li></ol><ul><li>@author 杨宇翔</li><li>@version 1.0</li><li>@date 2020/4/07 11:23</li><li>/<br>import com.bookstore.commons.beans.Order;<br>import com.bookstore.commons.beans.OrderItem;<br>import com.bookstore.commons.beans.User;</li></ul></li></ol><p>import javax.servlet.http.HttpServletRequest;<br>import java.util.List;</p><p>public interface IUserService {<br>    int addUser(User user, HttpServletRequest request);</p><pre><code>int activeUser(String activeCode);User findEmail(String email);User findUsername(String username);User findUserByLogin(User user);int modifyUser(User user);List&lt;Order&gt; findOrderByUser(Integer id);List&lt;OrderItem&gt; findOrderItemById(String id);void removeOrderById(String id, String flag);</code></pre><p>}</p><pre><code>如果是接口就必须要要有实现类，于是还要在这一层定义一个实现类,有时候为了保证事物的原子性一致性，可以在这一层增加一些横向的事务```javapackage com.bookstore.client.user.service;/** * @author 杨宇翔 * @version 1.0 * @date 2020/4/07 11:23 */@Servicepublic class UserServiceImpl implements IUserService {    @Resource    IUserDao userDao;    @Override    public int addUser(User user, HttpServletRequest request) {        String emailMsg = &quot;感谢您使用网上书城，请点击&lt;a href=&#39;http://localhost:8080&quot;+request.getContextPath()+&quot;/client/user/activeUser?activeCode=&quot;+user.getActiveCode()+&quot;&#39;&gt;激活&lt;/a&gt;后使用！&quot;;        try {            MailUtil.sendMail(user.getEmail(),emailMsg);        } catch (MessagingException e) {            e.printStackTrace();        }        return userDao.insertUser(user);    }    @Override    public int activeUser(String activeCode) {        return userDao.activeUser(activeCode);    }    @Override    public User findEmail(String email) {        return userDao.selectEmail(email);    }    @Override    public User findUsername(String username) {        return userDao.selectUsername(username);    }    @Override    public User findUserByLogin(User user) {        return userDao.selectUserByLogin(user);    }    @Override    public int modifyUser(User user) {        return userDao.updateUser(user);    }    @Override    public List&lt;Order&gt; findOrderByUser(Integer id) {        return userDao.selectOrderByUser(id);    }    @Override    public List&lt;OrderItem&gt; findOrderItemById(String id) {        return userDao.selectOrderItemById(id);    }    @Override    public void removeOrderById(String id, String flag) {        //先加上商品库存 再删除订单等 防止 删除订单后 查询不到需要被加回库存的id        if (flag == null){            List&lt;OrderItem&gt; items = userDao.selectOrderItemById(id);            //加回库存            for (OrderItem item:items) {                userDao.updateProductnum(item);            }        }        //删除订单和订单项        userDao.deleteOrderById(id);        userDao.deleteOrderItemById(id);    }}</code></pre><ol start="6"><li>最后一层就是Dao层也就是Mybatis层，在这里需要通过接口传递上一层service的方法，然后编写SQL语句，通过sql语句完成我们说需要的功能，比如最简单的CURD<pre><code class="java">package com.bookstore.client.user.dao;/*** @author 杨宇翔* @version 1.0* @date 2020/4/07 11:23*/import com.bookstore.commons.beans.Order;import com.bookstore.commons.beans.OrderItem;import com.bookstore.commons.beans.User;</code></pre></li></ol><p>import java.util.List;</p><p>public interface IUserDao {</p><pre><code>int insertUser(User user);int activeUser(String activeCode);User selectEmail(String email);User selectUsername(String username);User selectUserByLogin(User user);int updateUser(User user);List&lt;Order&gt; selectOrderByUser(Integer id);List&lt;OrderItem&gt; selectOrderItemById(String id);void deleteOrderById(String id);void deleteOrderItemById(String id);void updateProductnum(OrderItem item);</code></pre><p>}</p><pre><code>```xml&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;!DOCTYPE mapper        PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;        &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.bookstore.client.user.dao.IUserDao&quot;&gt;    &lt;!--注册用户--&gt;    &lt;insert id=&quot;insertUser&quot;&gt;        insert into user (username,password,email,gender,telephone,introduce,activeCode)        values (#{username},#{password},#{email},#{gender},#{telephone},#{introduce},#{activeCode})    &lt;/insert&gt;&lt;!--激活就是把状态0修改为1--&gt;    &lt;update id=&quot;activeUser&quot;&gt;        update user set state = 1        where activeCode = #{activeCode}    &lt;/update&gt;    &lt;!--查询邮箱是否已被使用--&gt;    &lt;select id=&quot;selectEmail&quot; resultType=&quot;User&quot;&gt;        select * from user where email = #{email}    &lt;/select&gt;    &lt;!--查询会员名是否被占用--&gt;    &lt;select id=&quot;selectUsername&quot; resultType=&quot;User&quot;&gt;        select * from user where username = #{username}    &lt;/select&gt;    &lt;!--查询登录用户--&gt;    &lt;select id=&quot;selectUserByLogin&quot; resultType=&quot;User&quot;&gt;        select * from user where username = #{username} and password = #{password}    &lt;/select&gt;    &lt;!--修改用户信息--&gt;    &lt;update id=&quot;updateUser&quot;&gt;        update user set password = #{password},gender = #{gender},telephone = #{telephone} where id = #{id}    &lt;/update&gt;</code></pre><p>以上就是SSM框架的基本流程，当然我贴出的示例代码都是不完整的，毕竟连前台页面都没有，我只是说出了SSM框架的基本思想，有了这种是思想后就很容易上手其他的项目，当然现在SSM已经不是大势所趋，SpringBoot和SpringCloud这种微服务架构才是近几年的大势，但是无论学习什么一定要学好基础，了解道原理，才能更深层的学习</p><p>下一篇我会详细介绍SSM框架的一些常用的注解，方便学习</p><pre><code class="java">public class Test{    public static void main(String[] arges){    byte a;    int b = 298;    a = (byte)b;    System.out.println(&quot;b=&quot;+b);    System.out.println(&quot;a=&quot;+a);    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> SSM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC运行流程</title>
      <link href="/2020/06/11/springmvc/"/>
      <url>/2020/06/11/springmvc/</url>
      
        <content type="html"><![CDATA[<h3 id="1-SpringMVC的运行流程"><a href="#1-SpringMVC的运行流程" class="headerlink" title="1. SpringMVC的运行流程"></a>1. SpringMVC的运行流程</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9RQ3U4NDlZVGFJTzZqaWI4WFAzcjhoOHNpYjA4MGljaWJIdnVYZjZOODFvYVdSQlRKTjN0WUVIQlBpYjhlSENHTzZNbWx2a25TdWliRW1sUk90ejRJY2ZyeFg5dy82NDA?x-oss-process=image/format,png" alt="enter image description here"> </p><ol><li>用户向服务器发送请求，请求被Spring 前端控制Servelt DispatcherServlet捕获；</li></ol><ol start="2"><li>DispatcherServlet对请求URL进行解析，得到请求资源标识符（URI）。然后根据该URI，调用HandlerMapping获得该Handler配置的所有相关的对象（包括Handler对象以及Handler对象对应的拦截器），最后以HandlerExecutionChain对象的形式返回；</li></ol><ol start="3"><li>DispatcherServlet 根据获得的Handler，选择一个合适的HandlerAdapter；（附注：如果成功获得HandlerAdapter后，此时将开始执行拦截器的preHandler(…)方法）</li></ol><ol start="4"><li>提取Request中的模型数据，填充Handler入参，开始执行Handler（Controller)。 在填充Handler的入参过程中，根据你的配置，Spring将帮你做一些额外的工作：</li></ol><p>   ① HttpMessageConveter： 将请求消息（如Json、xml等数据）转换成一个对象，将对象转换为指定的响应信息<br>   ② 数据转换：对请求消息进行数据转换。如String转换成Integer、Double等<br>   ③ 数据根式化：对请求消息进行数据格式化。 如将字符串转换成格式化数字或格式化日期等<br>   ④ 数据验证： 验证数据的有效性（长度、格式等），验证结果存储到BindingResult或Error中<br>5.  Handler执行完成后，向DispatcherServlet 返回一个ModelAndView对象；</p><ol start="6"><li>根据返回的ModelAndView，选择一个适合的ViewResolver（必须是已经注册到Spring容器中的ViewResolver)返回给DispatcherServlet ；</li></ol><ol start="7"><li>ViewResolver 结合Model和View，来渲染视图；</li></ol><ol start="8"><li>将渲染结果返回给客户端。</li></ol><h3 id="2-springMVC的核心组件"><a href="#2-springMVC的核心组件" class="headerlink" title="2. springMVC的核心组件"></a>2. springMVC的核心组件</h3><ol><li>DispatcherServlet：中央控制器，把请求给转发到具体的控制类</li><li>Controller：具体处理请求的控制器</li><li>HandlerMapping：映射处理器，负责映射中央处理器转发给controller时的映射策略</li><li>ModelAndView：服务层返回的数据和视图层的封装类</li><li>ViewResolver：视图解析器，解析具体的视图</li><li>Interceptors ：拦截器，负责拦截我们定义的请求然后做处理工作</li></ol>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring简介</title>
      <link href="/2020/06/11/spring/"/>
      <url>/2020/06/11/spring/</url>
      
        <content type="html"><![CDATA[<h3 id="1-Spring的特点"><a href="#1-Spring的特点" class="headerlink" title="1. Spring的特点"></a>1. Spring的特点</h3><ol><li>轻量级</li><li>控制反转（IOC)</li><li>面向切面 (AOP)</li><li>容器<blockquote><p>简单来说，Spring是一个轻量级得到控制反转和面向切面的容器框架<br>至于IOC和AOP则是Spring的灵魂，这两点搞清楚，Spring就很容易理解了，下面我就来介绍这两个特性</p></blockquote><h4 id="AOP是什么？"><a href="#AOP是什么？" class="headerlink" title="AOP是什么？"></a>AOP是什么？</h4>AOP（Aspect-Oriented Programming，面向方面编程），可以说是OOP（Object-Oriented Programing，面向对象编程）的补充和完善。OOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。当我们需要为分散的对象引入公共行为的时候，OOP则显得无能为力。也就是说，OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。例如日志功能。日志代码往往水平地散布在所有对象层次中，而与它所散布到的对象的核心功能毫无关系。对于其他类型的代码，如安全性、异常处理和透明的持续性也是如此。这种散布在各处的无关的代码被称为横切（cross-cutting）代码，在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</li></ol><p>而AOP技术则恰恰相反，它利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其名为“Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。</p><p>使用“横切”技术，AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。</p><p>横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处都基本相似。比如权限认证、日志、事务处理。Aop 的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。正如Avanade公司的高级方案构架师Adam Magee所说，AOP的核心思想就是“将应用程序中的商业逻辑同对其提供支持的通用服务进行分离。”</p><h3 id="2-IOC是什么"><a href="#2-IOC是什么" class="headerlink" title="2. IOC是什么"></a>2. IOC是什么</h3><p>IOC是Inversion of Control的缩写，多数书籍翻译成“控制反转”。控制反转是依赖倒置原则的一种<strong>代码设计思想</strong>。具体采用的方法就是所谓的依赖注入（DI）</p><p>在Java开发中，Ioc意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。</p><p>传统应用程序都是由我们在类内部主动创建依赖对象，从而导致类与类之间高耦合，难于测试；有了IoC容器后，把创建和查找依赖对象的控制权交给了容器，由容器进行注入组合对象，所以对象与对象之间是松散耦合，这样也方便测试，利于功能复用，更重要的是使得程序的整个体系结构变得非常灵活。</p><p>IoC很好的体现了面向对象设计法则之一—— 好莱坞法则：“别找我们，我们找你”；即由IoC容器帮对象找相应的依赖对象并注入，而不是由对象主动去找。</p><h3 id="3-DI和IOC的关系"><a href="#3-DI和IOC的关系" class="headerlink" title="3. DI和IOC的关系"></a>3. DI和IOC的关系</h3><p>DI—Dependency Injection，即“依赖注入”：是组件之间依赖关系由容器在运行期决定，形象的说，即由容器动态的将某个依赖关系注入到组件之中。依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</p><p>理解DI的关键是：“谁依赖谁，为什么需要依赖，谁注入谁，注入了什么”，那我们来深入分析一下：</p><ol><li>谁依赖于谁：当然是应用程序依赖于IoC容器；</li><li>为什么需要依赖：应用程序需要IoC容器来提供对象需要的外部资源；</li><li>谁注入谁：很明显是IoC容器注入应用程序某个对象，应用程序依赖的对象；</li><li>注入了什么：就是注入某个对象所需要的外部资源（包括对象、资源、常量数据）。</li></ol><p>其实它们是同一个概念的不同角度描述，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以2004年大师级人物Martin Fowler又给出了一个新的名字：“依赖注入”，相对IoC 而言，<strong>“依赖注入”明确描述了“被注入对象依赖IoC容器配置依赖对象”</strong>。</p><p>Spring通过DI（依赖注入）实现IOC（控制反转），常用的注入方式主要有三种：</p><ol><li>构造方法注入</li><li>setter注入</li><li>基于注解的注入</li></ol><h3 id="4-Spring的模块"><a href="#4-Spring的模块" class="headerlink" title="4. Spring的模块"></a>4. Spring的模块</h3><p>Spring框架至今已集成了20多个模块。这些模块主要被分如下图所示的核心容器、数据访问/集成,、Web、AOP（面向切面编程）、工具、消息和测试模块。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9RQ3U4NDlZVGFJTzZqaWI4WFAzcjhoOHNpYjA4MGljaWJIdnV0ZlFKWUNIV0pqQ0VTOWlickZiVzAydXRtQks0bUNsRUNEOWRGV0ppYUtQUDdtUkdqaWJJdVh3YmcvNjQw?x-oss-process=image/format,png" alt="enter image description here"></p><p>####spring 事务实现方式有哪些？</p><ol><li>编程式事务管理对基于 POJO 的应用来说是唯一选择。我们需要在代码中调用beginTransaction()、commit()、rollback()等事务管理相关的方法，这就是编程式事务管理。</li><li>基于 TransactionProxyFactoryBean 的声明式事务管理</li><li>基于 @Transactional 的声明式事务管理</li><li>基于 Aspectj AOP 配置事务</li></ol>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上传Github</title>
      <link href="/2020/06/09/firstblog/"/>
      <url>/2020/06/09/firstblog/</url>
      
        <content type="html"><![CDATA[<h3 id="如何将本地的代码上传到Github"><a href="#如何将本地的代码上传到Github" class="headerlink" title="如何将本地的代码上传到Github"></a>如何将本地的代码上传到Github</h3><p>  众所周知Github是全球最大的同性交友网站（代码爱好者的代码托管网站）里面存放了程序员们开源的各种项目代码，掌握好Github的使用是程序员的必备技能 ，也是在校大学生期末项目制作的助攻神器</p><p>  下面我就来简单的介绍如何使用Github</p><p>   首先你需要一个github账号，所有还没有的话先去注册吧！<a href="https://github.com/">https://github.com/</a></p><p>我们使用git需要先安装git工具，这里给出下载地址，下载后一路直接安装即可：</p><p><a href="https://git-for-windows.github.io/" target="_blank" rel="noopener">https://git-for-windows.github.io/</a></p><blockquote><p>有条件的同学可以翻墙进去 毕竟服务器在国外 国内上比较卡</p></blockquote><hr><h5 id="1-进入Github首页，点击New-repository新建一个项目"><a href="#1-进入Github首页，点击New-repository新建一个项目" class="headerlink" title="1.进入Github首页，点击New repository新建一个项目"></a>1.进入Github首页，点击New repository新建一个项目</h5><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltYWdlczIwMTUuY25ibG9ncy5jb20vYmxvZy85MTM5MTMvMjAxNjA4LzkxMzkxMy0yMDE2MDgyMzE2NDE1NDUyNi00MTg0NDE5OTEucG5n?x-oss-process=image/format,png" alt="enter image description here"></p><h4 id="2-填写相应的信息后点击create"><a href="#2-填写相应的信息后点击create" class="headerlink" title="2.填写相应的信息后点击create"></a>2.填写相应的信息后点击create</h4><p>Repository name: 仓库名称<br>Description(可选): 仓库描述介绍<br>Public, Private : 仓库权限（公开共享，私有或指定合作者）<br>Initialize this repository with a README: 添加一个README.md<br>gitignore: 不需要进行版本管理的仓库类型，对应生成文件.gitignore<br>license: 证书类型，对应生成文件LICENSE</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltYWdlczIwMTUuY25ibG9ncy5jb20vYmxvZy85MTM5MTMvMjAxNjA4LzkxMzkxMy0yMDE2MDgyMzE2NTAyNTM3MC00OTQ0NDUwNi5wbmc?x-oss-process=image/format,png" alt="enter image description here"><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltYWdlczIwMTUuY25ibG9ncy5jb20vYmxvZy85MTM5MTMvMjAxNjA4LzkxMzkxMy0yMDE2MDgyMzE2NTAyNTM3MC00OTQ0NDUwNi5wbmc?x-oss-process=image/format,png" alt="enter image description here"></p><h4 id="3-点击Clone-or-dowload会出现一个地址，copy这个地址备用"><a href="#3-点击Clone-or-dowload会出现一个地址，copy这个地址备用" class="headerlink" title="3.点击Clone or dowload会出现一个地址，copy这个地址备用"></a>3.点击Clone or dowload会出现一个地址，copy这个地址备用</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltYWdlczIwMTUuY25ibG9ncy5jb20vYmxvZy85MTM5MTMvMjAxNjA4LzkxMzkxMy0yMDE2MDgyMzE2NTEwNzMwOC00Mzk5MjYwMDYucG5n?x-oss-process=image/format,png" alt="enter image description here"></p><h4 id="4-接下来就到本地操作了，首先右键你的项目，如果你之前安装git成功的话，右键会出现两个新选项，分别为Git-Gui-Here-Git-Bash-Here-这里我们选择Git-Bash-Here，进入如下界面，Test-Bluetooth即为我的项目名。"><a href="#4-接下来就到本地操作了，首先右键你的项目，如果你之前安装git成功的话，右键会出现两个新选项，分别为Git-Gui-Here-Git-Bash-Here-这里我们选择Git-Bash-Here，进入如下界面，Test-Bluetooth即为我的项目名。" class="headerlink" title="4.接下来就到本地操作了，首先右键你的项目，如果你之前安装git成功的话，右键会出现两个新选项，分别为Git Gui Here,Git Bash Here,这里我们选择Git Bash Here，进入如下界面，Test_Bluetooth即为我的项目名。"></a>4.接下来就到本地操作了，首先右键你的项目，如果你之前安装git成功的话，右键会出现两个新选项，分别为Git Gui Here,Git Bash Here,这里我们选择Git Bash Here，进入如下界面，Test_Bluetooth即为我的项目名。</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltYWdlczIwMTUuY25ibG9ncy5jb20vYmxvZy85MTM5MTMvMjAxNjA4LzkxMzkxMy0yMDE2MDgyMzE3MTA0ODMwOC0xOTQ4OTUyOTkucG5n?x-oss-process=image/format,png" alt="enter image description here"></p><h4 id="5-接下来输入如下代码（关键步骤），把github上面的仓库克隆到本地"><a href="#5-接下来输入如下代码（关键步骤），把github上面的仓库克隆到本地" class="headerlink" title="5..接下来输入如下代码（关键步骤），把github上面的仓库克隆到本地"></a>5..接下来输入如下代码（关键步骤），把github上面的仓库克隆到本地</h4><p>git clone <a href="https://github.com/CKTim/BlueTooth.git（https://github.com/CKTim/BlueTooth.git替换成你之前复制的地址）">https://github.com/CKTim/BlueTooth.git（https://github.com/CKTim/BlueTooth.git替换成你之前复制的地址）</a><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltYWdlczIwMTUuY25ibG9ncy5jb20vYmxvZy85MTM5MTMvMjAxNjA4LzkxMzkxMy0yMDE2MDgyMzE3MTE0Mzk4MC03NDExNTIwNDIucG5n?x-oss-process=image/format,png" alt="enter image description here"></p><h4 id="6-这个步骤以后你的本地项目文件夹下面就会多出个文件夹，该文件夹名即为你github上面的项目名，如图我多出了个Test文件夹，我们把本地项目文件夹下的所有文件（除了新多出的那个文件夹不用），其余都复制到那个新多出的文件夹下，"><a href="#6-这个步骤以后你的本地项目文件夹下面就会多出个文件夹，该文件夹名即为你github上面的项目名，如图我多出了个Test文件夹，我们把本地项目文件夹下的所有文件（除了新多出的那个文件夹不用），其余都复制到那个新多出的文件夹下，" class="headerlink" title="6.这个步骤以后你的本地项目文件夹下面就会多出个文件夹，该文件夹名即为你github上面的项目名，如图我多出了个Test文件夹，我们把本地项目文件夹下的所有文件（除了新多出的那个文件夹不用），其余都复制到那个新多出的文件夹下，"></a>6.这个步骤以后你的本地项目文件夹下面就会多出个文件夹，该文件夹名即为你github上面的项目名，如图我多出了个Test文件夹，我们把本地项目文件夹下的所有文件（除了新多出的那个文件夹不用），其余都复制到那个新多出的文件夹下，</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltYWdlczIwMTUuY25ibG9ncy5jb20vYmxvZy85MTM5MTMvMjAxNjA4LzkxMzkxMy0yMDE2MDgyMzE3MTIwOTczMC0yMDg5NDk2NDgzLnBuZw?x-oss-process=image/format,png" alt="enter image description here"></p><h4 id="7-接着输入命令cd-Test，进入Test文件夹"><a href="#7-接着输入命令cd-Test，进入Test文件夹" class="headerlink" title="7.接着输入命令cd Test，进入Test文件夹"></a>7.接着输入命令cd Test，进入Test文件夹</h4><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltYWdlczIwMTUuY25ibG9ncy5jb20vYmxvZy85MTM5MTMvMjAxNjA4LzkxMzkxMy0yMDE2MDgyMzE3MTQ1NDI2MS0xMDM2Mzc3Ny5wbmc?x-oss-process=image/format,png" alt="enter image description here"></p><h4 id="8-接下来依次输入以下代码即可完成其他剩余操作："><a href="#8-接下来依次输入以下代码即可完成其他剩余操作：" class="headerlink" title="8.接下来依次输入以下代码即可完成其他剩余操作："></a>8.接下来依次输入以下代码即可完成其他剩余操作：</h4><p>git add .        （注：别忘记后面的.，此操作是把Test文件夹下面的文件都添加进来）</p><p>git commit  -m  “提交信息”  （注：“提交信息”里面换成你需要，如“first commit”）</p><p>git push -u origin master   （注：此操作目的是把本地仓库push到github上面，此步骤需要你输入帐号和密码）</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltYWdlczIwMTUuY25ibG9ncy5jb20vYmxvZy85MTM5MTMvMjAxNjA4LzkxMzkxMy0yMDE2MDgyMzE3MTU1NzgyMy0zODYzNTEyLnBuZw?x-oss-process=image/format,png" alt="enter image description here"><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltYWdlczIwMTUuY25ibG9ncy5jb20vYmxvZy85MTM5MTMvMjAxNjA4LzkxMzkxMy0yMDE2MDgyMzE3MTY1MTgwOC0xMjI1MzM1MTM2LnBuZw?x-oss-process=image/format,png" alt="enter image description here"><br><img src="https://imgconvert.csdnimg.cn/aHR0cDovL2ltYWdlczIwMTUuY25ibG9ncy5jb20vYmxvZy85MTM5MTMvMjAxNjA4LzkxMzkxMy0yMDE2MDgyMzE3MTgxODkzMy0xNTA2ODE1NTY2LnBuZw?x-oss-process=image/format,png" alt="enter image description here"></p><h4 id="9-最后去自己的Github网页刷新一下就能看见这自己刚刚上传的代码了"><a href="#9-最后去自己的Github网页刷新一下就能看见这自己刚刚上传的代码了" class="headerlink" title="9.最后去自己的Github网页刷新一下就能看见这自己刚刚上传的代码了"></a>9.最后去自己的Github网页刷新一下就能看见这自己刚刚上传的代码了</h4><hr>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GIthub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/06/09/hello-world/"/>
      <url>/2020/06/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
